{"version":3,"sources":["App/ChemicalClassButton.tsx","App/Sounds.ts","App/Check.tsx","App/ChemicalData.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["ChemicalClassButton","props","className","onClick","handleClick","name","ctx","window","AudioContext","webkitAudioContext","promises","process","map","p","url","audioCtx","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","decodeAudioData","decodedBuffer","onerror","send","sound","n","then","b","source","createBufferSource","buffer","connect","destination","start","buttons","Кислота","Соль","Основание","Оксид","Check","useState","state","setState","showPrompt","setShowPrompt","checkNumber","useEffect","timer","setTimeout","console","log","timerFinish","handleFinishEvent","undefined","mainAnimationDuration","clearTimeout","formulaPositionClass","button1","button2","button3","button4","scoreClass","checkNumberClass","useCallback","str","soundNumber","result","formula","type","clickAnimationDuration","score","checksTotal","text","formulas","App","setCheckNumber","resufledFormulas","setResufledFormulas","setScore","element","document","documentElement","style","setProperty","toFixed","handleStartClick","newResufledFormulas","arr","arr1","item","Math","random","sort","a","pair","reshuffle","newScore","length","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e185e74.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { ButtonClickedType } from \"./ChemicalData\";\n\nconst ChemicalClassButton = (props: {\n  name: ButtonClickedType;\n  className: string;\n  handleClick: (str: ButtonClickedType) => void;\n}): JSX.Element => (\n  <div className={props.className + \" scale1-1\"}>\n    <button className=\"button\" onClick={() => props.handleClick(props.name)}>\n      {props.name}\n    </button>\n  </div>\n);\n\nexport default ChemicalClassButton;\n","//@ts-ignore\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst ctx = new AudioContext();\nconst audioPaths = [\n  process.env.PUBLIC_URL + \"/sounds/162485__kastenfrosch__space.mp3\", // start\n  process.env.PUBLIC_URL + \"/sounds/135510__chriddof__space-bloop.wav\", // true shot\n  process.env.PUBLIC_URL + \"/sounds/432761__xpoki__lazershot.wav\" // false shot\n];\n\n// https://stackoverflow.com/questions/47204048/play-multiple-audio-files-on-safari-at-once\n// utility function to load an audio file and resolve it as a decoded audio buffer\nfunction getBuffer(url: string, audioCtx: AudioContext) {\n  return new Promise((resolve, reject) => {\n    if (!url) {\n      reject(\"Missing url!\");\n      return;\n    }\n\n    if (!audioCtx) {\n      reject(\"Missing audio context!\");\n      return;\n    }\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url);\n    xhr.responseType = \"arraybuffer\";\n\n    xhr.onload = function() {\n      let arrayBuffer = xhr.response;\n      audioCtx.decodeAudioData(arrayBuffer, decodedBuffer => {\n        resolve(decodedBuffer);\n      });\n    };\n\n    xhr.onerror = function() {\n      reject(\"An error occurred.\");\n    };\n\n    xhr.send();\n  });\n}\n\nconst promises = audioPaths.map((p: string) => getBuffer(p, ctx));\n\nexport const sound = (n: number) =>\n  //@ts-ignore\n  promises[n].then((b: AudioBuffer) => {\n    const source = ctx.createBufferSource();\n    source.buffer = b;\n    source.connect(ctx.destination);\n    source.start();\n  });\n","import React, { useState, useCallback, useEffect } from \"react\";\n\nimport ChemicalClassButton from \"./ChemicalClassButton\";\nimport { sound } from \"./Sounds\";\nimport { ButtonClickedType, ChemicalType } from \"./ChemicalData\";\n\ntype StateType = \"zero\" | \"zero+\" | ButtonClickedType;\n\nconst buttons = {\n  Кислота: \"buttonPosition1\",\n  Соль: \"buttonPosition2\",\n  Основание: \"buttonPosition3\",\n  Оксид: \"buttonPosition4\"\n};\n\nconst Check = (props: {\n  checkNumber: number;\n  checksTotal: number;\n  clickAnimationDuration: number;\n  formula: ChemicalType;\n  handleFinishEvent: (_: boolean | undefined) => void;\n  mainAnimationDuration: number;\n  score: number;\n}): JSX.Element => {\n  const [state, setState] = useState<StateType>(\"zero\");\n  const [showPrompt, setShowPrompt] = useState(false);\n\n  const { checkNumber } = props;\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setState(\"zero+\");\n      console.log('setState(\"zero+\"); ');\n    }, 50);\n    const timerFinish = setTimeout(() => {\n      props.handleFinishEvent(undefined);\n      console.log(\"useEffect finish timeout \");\n    }, props.mainAnimationDuration);\n    return () => {\n      clearTimeout(timer);\n      clearTimeout(timerFinish);\n      console.log(\"useEffect clearTimeouts \");\n    };\n  }, [props]);\n\n  const handleClick = useCallback(\n    (str: ButtonClickedType) => {\n      if (state === \"zero+\") {\n        setState(str);\n        let soundNumber: number;\n        let result: boolean | undefined;\n\n        if (props.formula.type === str) {\n          soundNumber = 1;\n          result = true;\n        } else {\n          soundNumber = 2;\n          result = false;\n        }\n        sound(soundNumber);\n\n        setTimeout(() => {\n          props.handleFinishEvent(result);\n        }, props.clickAnimationDuration + 100);\n      }\n    },\n    [props, state]\n  );\n\n  let formulaPositionClass: string;\n  let button1: string;\n  let button2: string;\n  let button3: string;\n  let button4: string;\n  let scoreClass: string;\n  let checkNumberClass: string;\n\n  switch (state) {\n    case \"zero\":\n      formulaPositionClass = \"startPosition\";\n      if (checkNumber === 1) {\n        button1 = \"endPosition\";\n        button2 = \"endPosition\";\n        button3 = \"endPosition\";\n        button4 = \"endPosition\";\n        scoreClass = \"startPosition\";\n        checkNumberClass = \"startPosition\";\n      } else {\n        button1 = \"buttonPosition1 transition-true\";\n        button2 = \"buttonPosition2 transition-true\";\n        button3 = \"buttonPosition3 transition-true\";\n        button4 = \"buttonPosition4 transition-true\";\n        scoreClass = \"score transition-true\";\n        checkNumberClass = \"check-number transition-true\";\n      }\n      break;\n    case \"zero+\":\n      formulaPositionClass = \"endPosition endPositionTransition\";\n      button1 = \"buttonPosition1 transition-true\";\n      button2 = \"buttonPosition2 transition-true\";\n      button3 = \"buttonPosition3 transition-true\";\n      button4 = \"buttonPosition4 transition-true\";\n      scoreClass = \"score transition-true\";\n      checkNumberClass = \"check-number transition-true\";\n      break;\n    default:\n      formulaPositionClass = `${buttons[state]} ${\n        props.formula.type === state ? \" transition-true\" : \" transition-false\"\n      }`;\n      button1 = \"buttonPosition1\";\n      button2 = \"buttonPosition2\";\n      button3 = \"buttonPosition3\";\n      button4 = \"buttonPosition4\";\n      scoreClass = \"score transition-true\";\n      checkNumberClass = \"check-number transition-true\";\n      console.log(\"state =  \", state);\n      console.log(\"formulaPositionClass =  \", formulaPositionClass);\n      break;\n  }\n\n  return (\n    <div className=\"main\">\n      <div className={scoreClass}>{props.score}</div>\n\n      <div className={checkNumberClass}>\n        {`${props.checkNumber} / ${props.checksTotal}`}\n      </div>\n\n      <div className={formulaPositionClass}>\n        <button className=\"formula\" onClick={() => setShowPrompt(true)}>\n          {props.formula.formula}\n        </button>\n        {showPrompt && <div>{props.formula.text}</div>}\n      </div>\n\n      <ChemicalClassButton\n        name=\"Кислота\"\n        className={button1}\n        handleClick={handleClick}\n      />\n      <ChemicalClassButton\n        name=\"Соль\"\n        className={button2}\n        handleClick={handleClick}\n      />\n      <ChemicalClassButton\n        name=\"Основание\"\n        className={button3}\n        handleClick={handleClick}\n      />\n      <ChemicalClassButton\n        name=\"Оксид\"\n        className={button4}\n        handleClick={handleClick}\n      />\n    </div>\n  );\n};\n\nexport default Check;\n","import React from \"react\";\n\nexport type ButtonClickedType = \"Кислота\" | \"Соль\" | \"Основание\" | \"Оксид\";\n\nexport type ChemicalType = {\n  name: string;\n  type: ButtonClickedType;\n  formula: JSX.Element;\n  text: string;\n};\n\nexport function reshuffle<T>(arr: T[]): T[] {\n  const arr1 = arr.map((item: T): [number, T] => [Math.random(), item]);\n  arr1.sort((a, b) => a[0] - b[0]);\n  return arr1.map(pair => pair[1]);\n}\n\nexport const formulas: ChemicalType[] = [\n  {\n    name: \"Серная кислота\",\n    text: \"Очень едкое вещество\",\n    type: \"Кислота\",\n    formula: (\n      <div>\n        H<sub>2</sub>SO<sub>4</sub>\n      </div>\n    )\n  },\n  {\n    name: \"Соляная кислота\",\n    text: \"Прозрачная едкая жидкость\",\n    type: \"Кислота\",\n    formula: <div>HCl</div>\n  },\n  {\n    name: \"Гидроксид аммония\",\n    text: \"Сульфид аммония\",\n    type: \"Основание\",\n    formula: (\n      <div>\n        NH<sub>4</sub>OH\n      </div>\n    )\n  },\n  {\n    name: \"Cульфит натрия\",\n    text: \"Cульфит натрия\",\n    type: \"Соль\",\n    formula: (\n      <div>\n        Na<sub>2</sub>SO<sub>3</sub>\n      </div>\n    )\n  },\n  {\n    name: \"Вода (оксид водорода)\",\n    text: \"Вода\",\n    type: \"Оксид\",\n    formula: (\n      <div>\n        H<sub>2</sub>O\n      </div>\n    )\n  }\n];\n","import React, { useState, useCallback, useEffect } from \"react\";\n\nimport Check from \"./Check\";\n\nimport { formulas, reshuffle } from \"./ChemicalData\";\n\nimport { sound } from \"./Sounds\";\n\nconst MAIN_ANIMATION_DURATION = 1000000;\nconst CLICK_ANIMATION_DURATION = 1000;\n\nconst CHECKS_TOTAL = 5;\n\nconst App: React.FC = () => {\n  const [checkNumber, setCheckNumber] = useState(1);\n  const [resufledFormulas, setResufledFormulas] = useState(formulas);\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    const element = document.documentElement;\n    element.style.setProperty(\n      \"--main-animation-duration\",\n      (MAIN_ANIMATION_DURATION / 1000).toFixed(2) + \"s\"\n    );\n    element.style.setProperty(\n      \"--click-animation-duration\",\n      (CLICK_ANIMATION_DURATION / 1000).toFixed(2) + \"s\"\n    );\n    return () => {};\n  }, []);\n\n  const handleStartClick = useCallback(() => {\n    console.log(\"Нажата кнопка старт\");\n    const newResufledFormulas = reshuffle(formulas);\n    setResufledFormulas(newResufledFormulas);\n    console.log(\"newResufledFormulas = \", newResufledFormulas);\n    setCheckNumber(1);\n    setScore(0);\n    sound(0);\n  }, []);\n\n  const handleFinishEvent = useCallback(\n    result => {\n      console.log(\"handleFinishEvent fired\");\n      let newScore = score;\n      switch (result) {\n        case true:\n          newScore += 2;\n          break;\n        case false:\n          newScore -= 1;\n          break;\n        case undefined:\n          newScore += 0;\n          break;\n      }\n      setScore(newScore);\n      setCheckNumber(\n        checkNumber > CHECKS_TOTAL || checkNumber >= resufledFormulas.length\n          ? 0\n          : checkNumber + 1\n      );\n    },\n    [checkNumber, resufledFormulas.length, score]\n  );\n\n  return (\n    <div>\n      {checkNumber === 0 ? (\n        <div key=\"Старт\">\n          <button onClick={handleStartClick}>Старт</button>\n        </div>\n      ) : (\n        <Check\n          key={checkNumber}\n          checkNumber={checkNumber}\n          checksTotal={CHECKS_TOTAL}\n          clickAnimationDuration={CLICK_ANIMATION_DURATION}\n          formula={resufledFormulas[checkNumber - 1]}\n          handleFinishEvent={handleFinishEvent}\n          mainAnimationDuration={MAIN_ANIMATION_DURATION}\n          score={score}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App/App.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}