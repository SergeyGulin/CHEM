{"version":3,"sources":["App/Button.tsx","App/Sounds.ts","App/Step.tsx","App/ChemicalData.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","className","onClick","handleClick","name","ClassificationButton","ctx","window","AudioContext","webkitAudioContext","promises","process","map","p","url","audioCtx","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","decodeAudioData","decodedBuffer","onerror","send","sound","n","then","buffer","source","createBufferSource","connect","destination","start","buttons","Кислота","Соль","Основание","Оксид","Step","useState","state","setState","showHint","setShowHint","stepNumber","useEffect","timer","setTimeout","console","log","timerFinish","handleFinishEvent","formula","type","answer","undefined","mainAnimationDuration","clearTimeout","formulaPositionClass","button1","button2","button3","button4","scoreClass","checkNumberClass","useCallback","str","result","soundNumber","clickAnimationDuration","score","checksTotal","text","formulas","App","setStepData","resufledFormulas","setResufledFormulas","animationStep","setAnimationStep","element","document","documentElement","style","setProperty","toFixed","handleStartClick","newResufledFormulas","arr","arr1","item","Math","random","sort","a","b","pair","reshuffle","newScore","length","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d5d9436.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { ButtonClickedType } from \"./ChemicalData\";\n\nexport const Button = (props: {\n  name: string;\n  className: string;\n  handleClick: () => void;\n}): JSX.Element => (\n  <div className={props.className + \" scale1-1\"}>\n    <button className=\"buttonView\" onClick={props.handleClick}>\n      {props.name}\n    </button>\n  </div>\n);\n\nexport const ClassificationButton = (props: {\n  name: ButtonClickedType;\n  className: string;\n  handleClick: (str: ButtonClickedType) => void;\n}): JSX.Element => (\n  <Button\n    name={props.name}\n    className={props.className}\n    handleClick={() => props.handleClick(props.name)}\n  />\n);\n","const AudioContext =\n  (window as any).AudioContext || (window as any).webkitAudioContext;\nconst ctx = new AudioContext();\nconst audioPaths = [\n  process.env.PUBLIC_URL + \"/sounds/162485__kastenfrosch__space.mp3\", // start\n  process.env.PUBLIC_URL + \"/sounds/135510__chriddof__space-bloop.wav\", // true shot\n  process.env.PUBLIC_URL + \"/sounds/432761__xpoki__lazershot.wav\" // false shot\n];\n\n// https://stackoverflow.com/questions/47204048/play-multiple-audio-files-on-safari-at-once\n// utility function to load an audio file and resolve it as a decoded audio buffer\nfunction getBuffer(url: string, audioCtx: AudioContext) {\n  return new Promise((resolve, reject) => {\n    if (!url) {\n      reject(\"Missing url!\");\n      return;\n    }\n\n    if (!audioCtx) {\n      reject(\"Missing audio context!\");\n      return;\n    }\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url);\n    xhr.responseType = \"arraybuffer\";\n\n    xhr.onload = function() {\n      let arrayBuffer = xhr.response;\n      audioCtx.decodeAudioData(arrayBuffer, decodedBuffer => {\n        resolve(decodedBuffer);\n      });\n    };\n\n    xhr.onerror = function() {\n      reject(\"An error occurred.\");\n    };\n\n    xhr.send();\n  });\n}\n\nconst promises = audioPaths.map((p: string) => getBuffer(p, ctx));\n\nexport const sound = (n: number) =>\n  promises[n].then((buffer: any): void => {\n    const source = ctx.createBufferSource();\n    source.buffer = buffer as any;\n    source.connect(ctx.destination);\n    source.start();\n  });\n","import React, { useState, useCallback, useEffect } from \"react\";\n\nimport { ClassificationButton } from \"./Button\";\nimport { sound } from \"./Sounds\";\nimport { ButtonClickedType, ChemicalType } from \"./ChemicalData\";\n\ntype StateType = \"zero\" | \"zero+\" | \"zero+false\" | ButtonClickedType;\n\nconst buttons = {\n  Кислота: \"buttonPosition1\",\n  Соль: \"buttonPosition2\",\n  Основание: \"buttonPosition3\",\n  Оксид: \"buttonPosition4\"\n};\n\nconst Step = (props: {\n  stepNumber: number;\n  checksTotal: number;\n  clickAnimationDuration: number;\n  formula: ChemicalType;\n  handleFinishEvent: ({\n    name,\n    type,\n    answer\n  }: {\n    name: string;\n    type: string;\n    answer: string | undefined;\n  }) => void;\n  mainAnimationDuration: number;\n  score: number;\n}): JSX.Element => {\n  const [state, setState] = useState<StateType>(\"zero\");\n  const [showHint, setShowHint] = useState(false);\n\n  const { stepNumber } = props;\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setState(\"zero+\");\n      console.log('setState(\"zero+\"); ');\n    }, 50);\n    const timerFinish = setTimeout(() => {\n      props.handleFinishEvent({\n        name: props.formula.name,\n        type: props.formula.type,\n        answer: undefined\n      });\n      console.log(\"useEffect finish timeout \");\n    }, props.mainAnimationDuration);\n    return () => {\n      clearTimeout(timer);\n      clearTimeout(timerFinish);\n      console.log(\"useEffect clearTimeouts \");\n    };\n  }, [props]);\n\n  const handleClick = useCallback(\n    (str: ButtonClickedType) => {\n      if (state === \"zero+\") {\n        setState(str);\n        const result = props.formula.type === str;\n        const soundNumber = result ? 1 : 2;\n        const answer = {\n          name: props.formula.name,\n          type: props.formula.type,\n          answer: str\n        };\n        sound(soundNumber);\n        if (!result) {\n          setTimeout(\n            () => setState(\"zero+false\"),\n            props.clickAnimationDuration + 100\n          );\n        }\n        setTimeout(() => {\n          props.handleFinishEvent(answer);\n        }, (props.clickAnimationDuration + 100) * (result ? 1 : 2));\n      }\n    },\n    [props, state]\n  );\n\n  let formulaPositionClass: string;\n  let button1: string;\n  let button2: string;\n  let button3: string;\n  let button4: string;\n  let scoreClass: string;\n  let checkNumberClass: string;\n\n  switch (state) {\n    case \"zero\":\n      formulaPositionClass = \"startPosition\";\n      if (stepNumber === 1) {\n        button1 = \"endPosition\";\n        button2 = \"endPosition\";\n        button3 = \"endPosition\";\n        button4 = \"endPosition\";\n        scoreClass = \"startPosition\";\n        checkNumberClass = \"startPosition\";\n      } else {\n        button1 = \"buttonPosition1 transition-true\";\n        button2 = \"buttonPosition2 transition-true\";\n        button3 = \"buttonPosition3 transition-true\";\n        button4 = \"buttonPosition4 transition-true\";\n        scoreClass = \"score transition-true\";\n        checkNumberClass = \"check-number transition-true\";\n      }\n      break;\n    case \"zero+\":\n    case \"zero+false\":\n      formulaPositionClass = \"endPosition endPositionTransition\";\n      button1 = \"buttonPosition1 transition-true\";\n      button2 = \"buttonPosition2 transition-true\";\n      button3 = \"buttonPosition3 transition-true\";\n      button4 = \"buttonPosition4 transition-true\";\n      scoreClass = \"score transition-true\";\n      checkNumberClass = \"check-number transition-true\";\n      break;\n    default:\n      formulaPositionClass = `${buttons[state]} ${\n        props.formula.type === state ? \" transition-true\" : \" transition-false\"\n      }`;\n      button1 = \"buttonPosition1\";\n      button2 = \"buttonPosition2\";\n      button3 = \"buttonPosition3\";\n      button4 = \"buttonPosition4\";\n      scoreClass = \"score transition-true\";\n      checkNumberClass = \"check-number transition-true\";\n      console.log(\"state =  \", state);\n      console.log(\"formulaPositionClass =  \", formulaPositionClass);\n      break;\n  }\n\n  return (\n    <div className=\"main main2-background-size\">\n      <div className={scoreClass}>{props.score}</div>\n\n      <div className={checkNumberClass}>\n        {`${props.stepNumber} / ${props.checksTotal}`}\n      </div>\n\n      <ClassificationButton\n        name=\"Кислота\"\n        className={button1}\n        handleClick={handleClick}\n      />\n      <ClassificationButton\n        name=\"Соль\"\n        className={button2}\n        handleClick={handleClick}\n      />\n      <ClassificationButton\n        name=\"Основание\"\n        className={button3}\n        handleClick={handleClick}\n      />\n      <ClassificationButton\n        name=\"Оксид\"\n        className={button4}\n        handleClick={handleClick}\n      />\n\n      <div className={formulaPositionClass}>\n        <button className=\"formulaView\" onClick={() => setShowHint(true)}>\n          <div>{props.formula.formula}</div>\n          {showHint && <div className=\"formula-hint\">{props.formula.text}</div>}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Step;\n","import React from \"react\";\n\nexport type ButtonClickedType = \"Кислота\" | \"Соль\" | \"Основание\" | \"Оксид\";\n\nexport type ChemicalType = {\n  name: string;\n  type: ButtonClickedType;\n  formula: JSX.Element;\n  text: string;\n};\n\nexport function reshuffle<T>(arr: T[]): T[] {\n  const arr1 = arr.map((item: T): [number, T] => [Math.random(), item]);\n  arr1.sort((a, b) => a[0] - b[0]);\n  return arr1.map(pair => pair[1]);\n}\n\nexport const formulas: ChemicalType[] = [\n  {\n    name: \"Серная кислота\",\n    text: \"Очень едкое вещество\",\n    type: \"Кислота\",\n    formula: (\n      <div>\n        H<sub>2</sub>SO<sub>4</sub>\n      </div>\n    )\n  },\n  {\n    name: \"Соляная кислота\",\n    text: \"Прозрачная едкая жидкость\",\n    type: \"Кислота\",\n    formula: <div>HCl</div>\n  },\n  {\n    name: \"Гидроксид аммония\",\n    text: \"Сульфид аммония\",\n    type: \"Основание\",\n    formula: (\n      <div>\n        NH<sub>4</sub>OH\n      </div>\n    )\n  },\n  {\n    name: \"Cульфит натрия\",\n    text: \"Cульфит натрия\",\n    type: \"Соль\",\n    formula: (\n      <div>\n        Na<sub>2</sub>SO<sub>3</sub>\n      </div>\n    )\n  },\n  {\n    name: \"Вода (оксид водорода)\",\n    text: \"Вода\",\n    type: \"Оксид\",\n    formula: (\n      <div>\n        H<sub>2</sub>O\n      </div>\n    )\n  }\n];\n","import React, { useState, useCallback, useEffect } from \"react\";\n\nimport { Button } from \"./Button\";\nimport Step from \"./Step\";\n\nimport { formulas, reshuffle } from \"./ChemicalData\";\n\nimport { sound } from \"./Sounds\";\n\nconst MAIN_ANIMATION_DURATION = 10000;\nconst CLICK_ANIMATION_DURATION = 1000;\n\nconst CHECKS_TOTAL = 5;\n\nconst App: React.FC = () => {\n  const [{ stepNumber, score }, setStepData] = useState<{\n    stepNumber: number;\n    score: number;\n  }>({ stepNumber: 0, score: 0 });\n  const [resufledFormulas, setResufledFormulas] = useState(formulas);\n\n  const [animationStep, setAnimationStep] = useState(false);\n\n  useEffect(() => {\n    const element = document.documentElement;\n    element.style.setProperty(\n      \"--main-animation-duration\",\n      (MAIN_ANIMATION_DURATION / 1000).toFixed(2) + \"s\"\n    );\n    element.style.setProperty(\n      \"--click-animation-duration\",\n      (CLICK_ANIMATION_DURATION / 1000).toFixed(2) + \"s\"\n    );\n    const timer = setTimeout(() => setAnimationStep(true), 50);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  const handleStartClick = useCallback(() => {\n    console.log(\"Нажата кнопка старт\");\n    const newResufledFormulas = reshuffle(formulas);\n    setResufledFormulas(newResufledFormulas);\n    console.log(\"newResufledFormulas = \", newResufledFormulas);\n    setStepData({ stepNumber: 1, score: 0 });\n    sound(0);\n  }, []);\n\n  const handleFinishEvent = useCallback(\n    ({\n      name,\n      type,\n      answer\n    }: {\n      name: string;\n      type: string;\n      answer: string | undefined;\n    }) => {\n      console.log(\"handleFinishEvent name = \", name);\n      console.log(\"handleFinishEvent type = \", type);\n      console.log(\"handleFinishEvent answer = \", answer);\n      let newScore;\n      if (answer === undefined) {\n        newScore = score;\n      } else {\n        if (type === answer) {\n          newScore = score + 2;\n        } else {\n          newScore = score - 1;\n        }\n      }\n\n      setStepData({\n        stepNumber:\n          stepNumber > CHECKS_TOTAL || stepNumber >= resufledFormulas.length\n            ? 0\n            : stepNumber + 1,\n        score: newScore\n      });\n    },\n    [stepNumber, resufledFormulas.length, score]\n  );\n\n  return (\n    <div>\n      {stepNumber === 0 ? (\n        <div key=\"Старт\" className=\"main main1-background-size\">\n          <Button\n            name=\"Начать новую игру\"\n            className={\n              animationStep\n                ? \"buttonPositionPlay transition-true\"\n                : \"startPosition\"\n            }\n            handleClick={handleStartClick}\n          />\n          <Button\n            name=\"Лучшие результаты\"\n            className={\n              animationStep\n                ? \"buttonPositionShowRecords transition-true\"\n                : \"startPosition\"\n            }\n            handleClick={handleStartClick}\n          />\n          <Button\n            name=\"Неправильные ответы\"\n            className={\n              animationStep\n                ? \"buttonPositionShowWrongShots transition-true\"\n                : \"startPosition\"\n            }\n            handleClick={handleStartClick}\n          />\n        </div>\n      ) : (\n        <Step\n          key={stepNumber}\n          stepNumber={stepNumber}\n          checksTotal={CHECKS_TOTAL}\n          clickAnimationDuration={CLICK_ANIMATION_DURATION}\n          formula={resufledFormulas[stepNumber - 1]}\n          handleFinishEvent={handleFinishEvent}\n          mainAnimationDuration={MAIN_ANIMATION_DURATION}\n          score={score}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App/App.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}