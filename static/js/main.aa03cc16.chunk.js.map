{"version":3,"sources":["App/ChemicalClassButton.tsx","App/Sounds.ts","App/Check.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["ChemicalClassButton","props","className","onClick","handleClick","name","sound1","Audio","process","sound2","formula","Check","useState","chosenClassName","setChosenClassName","checkNumber","useEffect","timer","setTimeout","console","log","timerFinish","handleFinishEvent","mainAnimationDuration","clearTimeout","useCallback","str","play","pause","currentTime","clickAnimationDuration","App","setCheckNumber","element","document","documentElement","style","setProperty","toFixed","handleStartClick","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sJAiBeA,EAfa,SAACC,GAAD,OAK1B,yBAAKC,UAAWD,EAAMC,UAAY,UAChC,4BACEA,UAAU,SACVC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMC,aAEtCD,EAAMI,QCZAC,EAAS,IAAIC,MACxBC,gDAEWC,EAAS,IAAIF,MACxBC,qDCCIE,EACJ,iCACG,kCADH,KACiB,mCA0FJC,EAtFD,SAACV,GAKK,IAAD,EAC6BW,mBAC5C,iBAFe,mBACVC,EADU,KACOC,EADP,KAKTC,EAAgBd,EAAhBc,YAERC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBJ,EAAmB,eACnBK,QAAQC,IAAI,yCACX,IACGC,EAAcH,YAAW,WAC7BjB,EAAMqB,oBACNH,QAAQC,IAAI,gCACXnB,EAAMsB,uBACT,OAAO,WACLC,aAAaP,GACbO,aAAaH,GACbF,QAAQC,IAAI,gCAEb,CAACnB,IAEJ,IAAMG,EAAcqB,uBAClB,SAAAC,GAC0B,gBAApBb,IACFC,EAAmBY,GACnBjB,EAAOkB,OACPT,YAAW,WACTT,EAAOmB,QACPnB,EAAOoB,YAAc,EACrB5B,EAAMqB,sBACLrB,EAAM6B,uBAAyB,QAGtC,CAACjB,EAAiBZ,IAGpB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAW,WAAaW,GAAkBH,GAC/C,kBAAC,EAAD,CACEL,KAAK,6CACLH,UACsB,kBAApBW,GAAuD,IAAhBE,EACnC,cACA,kBAENX,YAAaA,IAEf,kBAAC,EAAD,CACEC,KAAK,2BACLH,UACsB,kBAApBW,GAAuD,IAAhBE,EACnC,cACA,kBAENX,YAAaA,IAEf,kBAAC,EAAD,CACEC,KAAK,yDACLH,UACsB,kBAApBW,GAAuD,IAAhBE,EACnC,cACA,kBAENX,YAAaA,IAEf,kBAAC,EAAD,CACEC,KAAK,iCACLH,UACsB,kBAApBW,GAAuD,IAAhBE,EACnC,cACA,kBAENX,YAAaA,MCpCN2B,EA9CO,WAAO,IAAD,EACYnB,mBAAS,GADrB,mBACnBG,EADmB,KACNiB,EADM,KAG1BhB,qBAAU,WACR,IAAMiB,EAAUC,SAASC,gBASzB,OARAF,EAAQG,MAAMC,YACZ,4BACA,GAAiCC,QAAQ,GAAK,KAEhDL,EAAQG,MAAMC,YACZ,6BACA,GAAkCC,QAAQ,GAAK,KAE1C,eACN,IAEH,IAAMC,EAAmBd,uBAAY,WACnCN,QAAQC,IAAI,4GACZY,EAAe,GACf1B,EAAOqB,SACN,IAEGL,EAAoBG,uBAAY,WACpCN,QAAQC,IAAI,2BACZY,EAAejB,EAAc,EAAI,EAAIA,EAAc,KAClD,CAACA,IAEJ,OACE,6BACmB,IAAhBA,EACC,yBAAKyB,IAAI,kCACP,4BAAQrC,QAASoC,GAAjB,mCAGF,kBAAC,EAAD,CACEC,IAAKzB,EACLA,YAAaA,EACbO,kBAAmBA,EACnBC,sBAzCsB,IA0CtBO,uBAzCuB,QCKbW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.aa03cc16.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ChemicalClassButton = (props: {\n  name: string;\n  className: string;\n  handleClick: (str: string) => void;\n}): JSX.Element => (\n  <div className={props.className + \" scale\"}>\n    <button\n      className=\"button\"\n      onClick={() => props.handleClick(props.className)}\n    >\n      {props.name}\n    </button>\n  </div>\n);\n\nexport default ChemicalClassButton;\n","export const sound1 = new Audio(\n  process.env.PUBLIC_URL + \"/sounds/162485__kastenfrosch__space.mp3\"\n);\nexport const sound2 = new Audio(\n  process.env.PUBLIC_URL + \"/sounds/500304__fd-bratish__minigun-fire.wav\"\n);\n","import React, { useState, useCallback, useEffect } from \"react\";\n\nimport ChemicalClassButton from \"./ChemicalClassButton\";\nimport { sound2 } from \"./Sounds\";\n\nconst formula = (\n  <div>\n    H<sub>2</sub>SO<sub>4</sub>\n  </div>\n);\n\nconst Check = (props: {\n  checkNumber: number;\n  handleFinishEvent: () => void;\n  mainAnimationDuration: number;\n  clickAnimationDuration: number;\n}): JSX.Element => {\n  const [chosenClassName, setChosenClassName] = useState<string>(\n    \"startPosition\"\n  );\n\n  const { checkNumber } = props;\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setChosenClassName(\"endPosition\");\n      console.log(' setChosenClassName(\"endPosition\") ');\n    }, 50);\n    const timerFinish = setTimeout(() => {\n      props.handleFinishEvent();\n      console.log(\" useEffect finish timeout \");\n    }, props.mainAnimationDuration);\n    return () => {\n      clearTimeout(timer);\n      clearTimeout(timerFinish);\n      console.log(\" useEffect clearTimeouts \");\n    };\n  }, [props]);\n\n  const handleClick = useCallback(\n    str => {\n      if (chosenClassName === \"endPosition\") {\n        setChosenClassName(str);\n        sound2.play();\n        setTimeout(() => {\n          sound2.pause(); // stop playing\n          sound2.currentTime = 0;\n          props.handleFinishEvent();\n        }, props.clickAnimationDuration + 100);\n      }\n    },\n    [chosenClassName, props]\n  );\n\n  return (\n    <div className=\"main\">\n      <div className={\"formula \" + chosenClassName}>{formula}</div>\n      <ChemicalClassButton\n        name=\"Кислота\"\n        className={\n          chosenClassName === \"startPosition\" && checkNumber === 1\n            ? \"endPosition\"\n            : \"buttonPosition1\"\n        }\n        handleClick={handleClick}\n      />\n      <ChemicalClassButton\n        name=\"Соль\"\n        className={\n          chosenClassName === \"startPosition\" && checkNumber === 1\n            ? \"endPosition\"\n            : \"buttonPosition2\"\n        }\n        handleClick={handleClick}\n      />\n      <ChemicalClassButton\n        name=\"Основание\"\n        className={\n          chosenClassName === \"startPosition\" && checkNumber === 1\n            ? \"endPosition\"\n            : \"buttonPosition3\"\n        }\n        handleClick={handleClick}\n      />\n      <ChemicalClassButton\n        name=\"Оксид\"\n        className={\n          chosenClassName === \"startPosition\" && checkNumber === 1\n            ? \"endPosition\"\n            : \"buttonPosition4\"\n        }\n        handleClick={handleClick}\n      />\n    </div>\n  );\n};\n\nexport default Check;\n","import React, { useState, useCallback, useEffect } from \"react\";\n\nimport Check from \"./Check\";\n\nimport { sound1 } from \"./Sounds\";\n\nconst MAIN_ANIMATION_DURATION = 5000;\nconst CLICK_ANIMATION_DURATION = 1000;\n\nconst App: React.FC = () => {\n  const [checkNumber, setCheckNumber] = useState(0);\n\n  useEffect(() => {\n    const element = document.documentElement;\n    element.style.setProperty(\n      \"--main-animation-duration\",\n      (MAIN_ANIMATION_DURATION / 1000).toFixed(2) + \"s\"\n    );\n    element.style.setProperty(\n      \"--click-animation-duration\",\n      (CLICK_ANIMATION_DURATION / 1000).toFixed(2) + \"s\"\n    );\n    return () => {};\n  }, []);\n\n  const handleStartClick = useCallback(() => {\n    console.log(\"Нажата кнопка старт\");\n    setCheckNumber(1);\n    sound1.play();\n  }, []);\n\n  const handleFinishEvent = useCallback(() => {\n    console.log(\"handleFinishEvent fired\");\n    setCheckNumber(checkNumber > 5 ? 0 : checkNumber + 1);\n  }, [checkNumber]);\n\n  return (\n    <div>\n      {checkNumber === 0 ? (\n        <div key=\"Старт\">\n          <button onClick={handleStartClick}>Старт</button>\n        </div>\n      ) : (\n        <Check\n          key={checkNumber}\n          checkNumber={checkNumber}\n          handleFinishEvent={handleFinishEvent}\n          mainAnimationDuration={MAIN_ANIMATION_DURATION}\n          clickAnimationDuration={CLICK_ANIMATION_DURATION}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App/App.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}